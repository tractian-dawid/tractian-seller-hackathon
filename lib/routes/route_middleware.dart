import 'package:flutter/material.dart';

import 'route_names.dart';

/// Middleware para interceptar navega√ß√£o entre rotas
///
/// Este middleware pode ser usado para:
/// - Analytics de navega√ß√£o
/// - Verifica√ß√£o de autentica√ß√£o
/// - Logs de navega√ß√£o
/// - Valida√ß√µes personalizadas
class RouteMiddleware {
  /// Callback chamado antes de navegar para uma rota
  static bool onBeforeNavigate(String routeName, {Object? arguments}) {
    // Log da navega√ß√£o
    debugPrint('üß≠ Navigating to: $routeName');
    if (arguments != null) {
      debugPrint('üì¶ With arguments: $arguments');
    }

    // Validar se a rota existe
    if (!RouteNames.isValidRoute(routeName)) {
      debugPrint('‚ö†Ô∏è Invalid route: $routeName');
      return false;
    }

    // Aqui voc√™ pode adicionar l√≥gica de autentica√ß√£o
    // Por exemplo:
    // if (_requiresAuth(routeName) && !_isAuthenticated()) {
    //   return false;
    // }

    return true;
  }

  /// Callback chamado ap√≥s navegar para uma rota
  static void onAfterNavigate(String routeName, {Object? arguments}) {
    debugPrint('‚úÖ Navigation completed to: $routeName');

    // Aqui voc√™ pode adicionar analytics
    // Analytics.trackPageView(routeName);

    // Ou atualizar o t√≠tulo da p√°gina
    _updatePageTitle(routeName);
  }

  /// Callback chamado quando a navega√ß√£o falha
  static void onNavigationFailed(String routeName, {Object? error}) {
    debugPrint('‚ùå Navigation failed to: $routeName');
    if (error != null) {
      debugPrint('üí• Error: $error');
    }
  }

  /// Atualiza o t√≠tulo da p√°gina baseado na rota
  static void _updatePageTitle(String routeName) {
    final title = RouteNames.getPageTitle(routeName);
    debugPrint('üìÑ Page title: $title');

    // Em uma aplica√ß√£o web, voc√™ poderia atualizar o t√≠tulo do browser
    // html.document.title = title;
  }

  /// Verifica se uma rota requer autentica√ß√£o
  static bool requiresAuth(String routeName) {
    const protectedRoutes = [
      RouteNames.profile,
      RouteNames.settings,
    ];

    return protectedRoutes.contains(routeName);
  }

  /// Simula verifica√ß√£o de autentica√ß√£o
  static bool isAuthenticated() {
    // Aqui voc√™ verificaria o estado de autentica√ß√£o real
    // Por exemplo, verificar se existe um token v√°lido
    return true; // Simulando usu√°rio autenticado
  }

  /// Obt√©m a rota de fallback para rotas n√£o encontradas
  static String getFallbackRoute() {
    return RouteNames.home;
  }

  /// Verifica se pode navegar de volta
  static bool canNavigateBack(BuildContext context) {
    return Navigator.canPop(context);
  }

  /// Obt√©m informa√ß√µes sobre a pilha de navega√ß√£o
  static void debugNavigationStack(BuildContext context) {
    final route = ModalRoute.of(context);
    if (route != null) {
      debugPrint('üîç Current route: ${route.settings.name}');
      debugPrint('üîç Can pop: ${Navigator.canPop(context)}');
    }
  }
}
